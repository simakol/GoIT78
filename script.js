// class User {
//   static calculateBirthDate(age) {
//     return 2023 - age;
//   }

//   constructor(userName, userAge) {
//     this.name = userName;
//     this.age = userAge;
//   }

//   greeting() {
//     console.log(
//       `Hello, ${this.name}! You was born in ${User.calculateBirthDate(
//         this.age
//       )}`
//     );
//   }
// }

// const user = new User("Serg", 25);
// const user1 = new User("Olena", 24);
// console.log(user);
// console.log(user1);
// console.dir(user);
// user.greeting();

// console.log(User.calculateBirthDate(60))

// Array.prototype.test = function () {
//   console.log("–Ø –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥", this);
// };

// const arr = [1, 2, 3];

// arr.test();

//! ====================================

// Example 1 - –ë–ª–æ–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä

// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

// class Blogger {
//   constructor({ name, age, numberOfPosts, topics }) {
//     this.name = name;
//     this.age = age;
//     this.numberOfPosts = numberOfPosts;
//     this.topics = topics;
//   }

//   getInfo() {
//     return `Blogger ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts`;
//   }

//   updatePostCount(value){
//     this.numberOfPosts += value
//   }
// }

// const mango = new Blogger({
//   name: "mango@mail.com",
//   age: 24,
//   numberOfPosts: 20,
//   topics: ["tech", "cooking"],
// });
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new Blogger({
//   name: "poly@mail.com",
//   age: 19,
//   numberOfPosts: 17,
//   topics: ["sports", "gaming", "health"],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts

//! ====================================

// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É:

// getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.

// class Storage {
//   constructor(arr) {
//     this.items = arr;
//   }

//   getItems() {
//     return this.items;
//   }

//   addItem(item) {
//     this.items.push(item);
//   }

//   removeItem(item) {
//     this.items = this.items.filter((el) => el !== item);
//   }
// }

// const storage = new Storage(["üçé", "üçã", "üçá", "üçë"]);

// const items = storage.getItems();
// console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]

// storage.addItem("üçå");
// console.table(storage.items); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]

// storage.removeItem("üçã");
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]

//! ====================================

// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.

// class User {
//   #login;
//   #email;

//   constructor({ login, email }) {
//     this.#login = login;
//     this.#email = email;
//   }

//   get login() {
//     return this.#login;
//   }

//   set login(newLogin) {
//     if (!Number.isNaN(Number(newLogin))) {
//       /*
//         newLogin = "9"
//         Number("9") -> 9
//         Number.isNaN(9) -> false
//         !false -> true

//         newLogin = "Mangodoge"
//         Number("Mangodoge") -> NaN
//         Number.isNaN(NaN) -> true
//         !true -> false
//         */
//       console.log("–õ–æ–≥—ñ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —á–∏—Å–ª–æ–º!");
//     } else this.#login = newLogin;
//   }

//   get email() {
//     return this.#email;
//   }

//   set email(newEmail) {
//     this.#email = newEmail;
//   }
// }

// const mango = new User({
//   login: "Mango",
//   email: "mango@dog.woof",
// });

// console.log(mango);

// console.log(mango.login); // Mango
// mango.login = "Mangodoge";
// mango.login = "9";
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: "Poly",
//   email: "poly@mail.com",
// });

// console.log(poly.login); // Poly
// poly.login = "Polycutie";
// console.log(poly.login); // Polycutie

//! ====================================

// Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// {
//   LOW: 'low',
//   NORMAL: 'normal',
//   HIGH: 'high'
// }
// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).

// class Notes {
//   static Priority = {
//     LOW: "low",
//     NORMAL: "normal",
//     HIGH: "high",
//   };

//   static findIndexByText(items, text) {
//     return items.findIndex(({ text: noteText }) => text === noteText);
//   }

//   constructor(items = []) {
//     this.items = items;
//   }

//   addNote(note) {
//     this.items.push(note);
//   }

//   removeNote(text) {
//     const index = Notes.findIndexByText(this.items, text);
//     this.items.splice(index, 1);

//     // this.items = this.items.filter(({ text: noteText }) => text !== noteText);
//   }
//   updatePriority(text, newPriority) {
//     const index = Notes.findIndexByText(this.items, text);
//     this.items[index].priority = newPriority;

//     // const targetObj = this.items.find(
//     //   ({ text: noteText }) => text === noteText
//     // );
//     // targetObj.priority = newPriority;
//   }
// }

// const myNotes = new Notes([]);

// myNotes.addNote({ text: "–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞", priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: "–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞",
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote("–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞");
// console.log(myNotes.items);

// myNotes.updatePriority("–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞", Notes.Priority.HIGH);
// console.log(myNotes.items);

//! ====================================

// class Rectangle {
//   constructor(a, b) {
//     this.name = "Rectangle";
//     this.a = a;
//     this.b = b;
//   }

//   greeting() {
//     console.log(`Hello! I am ${this.name}`);
//   }

//   calculateArea() {
//     return this.a * this.b;
//   }
// }

// class Square extends Rectangle {
//   constructor(length) {
//     super(length, length);
//     this.name = "Square";
//   }
// }

// const rec = new Rectangle(4, 3);

// console.log(rec);

// rec.greeting();
// console.log(rec.calculateArea());

// const square = new Square(19);
// console.log(square);

// square.greeting();
// console.log(square.calculateArea());

//! ====================================
